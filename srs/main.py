from dotenv import load_dotenv
from os import getenv
import os
import asyncio

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart

from deepface import DeepFace

load_dotenv()
# –í–∞—à–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
TOKEN = getenv("BOT_TOKEN")


router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é "
        "—É–≥–∞–¥–∞—Ç—å —ç–º–æ—Ü–∏—é!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@router.message(F.photo)
async def handle_photo(message: types.Message, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        photo_id = photo.file_id

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        photo_obj = await bot.get_file(photo_id)
        photo_path = photo_obj.file_path
        photo_file = await bot.download_file(photo_path)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        temp_image_path = f'temp_image_{photo_id}.jpg'
        with open(temp_image_path, 'wb') as temp_image:
            temp_image.write(photo_file.read())

        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –Ω–∞ —Ñ–æ—Ç–æ
        emotions = await analyze_emotions(temp_image_path)

        # –í—ã–±–æ—Ä —é–Ω–∏–∫–æ–¥–∞ —Å–º–∞–π–ª–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
        chosen_emoji = await choose_emoji(emotions)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(temp_image_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–∞–π–ª–∏–∫–∞
        await message.reply(chosen_emoji)
        # await message.reply(res)
        await message.reply(f"–≠–º–æ—Ü–∏—è :{await en_to_ru(max(emotions, key=emotions.get))}")
    except ValueError:
        await message.reply("–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ª–∏—Ü–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π.")


async def analyze_emotions(image_file):
    result = DeepFace.analyze(img_path=image_file, actions=['emotion'], detector_backend='retinaface')
    return result[0]['emotion']


async def en_to_ru(text):
    emotion_mapping = {
        'angry': '–≥–Ω–µ–≤',
        'disgust': '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ',
        'fear': '—Å—Ç—Ä–∞—Ö',
        'happy': '—Ä–∞–¥–æ—Å—Ç—å',
        'sad': '–≥—Ä—É—Å—Ç—å',
        'surprise': '—É–¥–∏–≤–ª–µ–Ω–∏–µ',
        'neutral': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å'
    }
    perev = emotion_mapping[text]
    return perev


async def choose_emoji(emotions):
    # –≠–º–æ—Ü–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —é–Ω–∏–∫–æ–¥—ã —Å–º–∞–π–ª–∏–∫–æ–≤
    emoji_mapping = {
        'angry': 'üò°',
        'disgust': 'ü§¢',
        'fear': 'üò®',
        'happy': 'üòÑ',
        'sad': 'üò¢',
        'surprise': 'üò≤',
        'neutral': 'üòê'
    }

    # –ù–∞—Ö–æ–¥–∏–º —ç–º–æ—Ü–∏—é —Å –Ω–∞–∏–≤—ã—Å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    max_emotion = max(emotions, key=emotions.get)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —é–Ω–∏–∫–æ–¥ —Å–º–∞–π–ª–∏–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–π —ç–º–æ—Ü–∏–∏
    return emoji_mapping.get(max_emotion, 'üòê')  # –ï—Å–ª–∏ —ç–º–æ—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫


async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(TOKEN, default=DefaultBotProperties())
    # And the run events dispatching
    dp = Dispatcher(maintenance_mode=True)
    # Maintenance-—Ä–æ—É—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–π
    dp.include_routers(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
